; Macros for rendering blank tiles and rows.
; This helps to compress 1K nametables down to
; smaller procedurally-generated maps.

; Unlike subroutines, Ophis assembles macros each time
; they're invoked. This means if they're particularly
; long, they can bloat up your code. To minimize this
; bloat when rendering blank rows and tiles, we write
; subroutines for those longer repeated parts.

WriteBlankRow:
  STX TempX
  LDX #$00
* JSR WriteBlankTile
  INX
  CPX #$20
  BNE -
  LDX TempX
  RTS

WriteBlankTile:
  LDA #$00
  STA VRAMIO
  RTS  

.macro BlankRows  ; `BlankRows numRows
  STX TempX
  LDX #$00
_writeRow:
  JSR WriteBlankRow
  INX
  CPX #_1
  BNE _writeRow
  LDX TempX
.macend

.macro BlankTiles ; `BlankTiles numTiles
  STX TempX 
  LDX #$00
_writeBlank: 
  JSR WriteBlankTile
  INX
  CPX #_1
  BNE _writeBlank
  LDX TempX
.macend

InitSprites:
  ; Paddle 1 Top
  LDX #$00
* LDA Paddle1Top, X
  STA PaddleP1Top, X
  INX
  CPX #$04
  BNE -
  ; Paddle 1 Center
  LDX #$00
* LDA Paddle1Mid, X
  STA PaddleP1Mid, X
  INX
  CPX #$04
  BNE -
  ; Paddle 1 Bottom
  LDX #$00
* LDA Paddle1Bot, X
  STA PaddleP1Bot, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Top
  LDX #$00
* LDA Paddle2Top, X
  STA PaddleP2Top, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Center
  LDX #$00
* LDA Paddle2Mid, X
  STA PaddleP2Mid, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Bottom
  LDX #$00
* LDA Paddle2Bot, X
  STA PaddleP2Bot, X
  INX
  CPX #$04
  BNE -
  ; Ball
  LDX #$00
* LDA BallSprite, X
  STA Ball, X
  INX
  CPX #$04
  BNE -
  RTS

RenderTitleScreen:
  LDY #$00
  LDX #$04
  LDA #<TitleScreen
  STA MapAddr
  LDA #>TitleScreen
  STA MapAddr+1
  LDA PPUStatus
  LDA #$20
  STA VRAMAddr
  LDA #$00
  STA VRAMAddr
* LDA (MapAddr), Y
  STA VRAMIO
  INY
  CPY #$FF
  BNE -
  INC MapAddr+1
  DEX
  CPX #$00
  BNE -
  RTS

RenderPlayField:
  `setPPU NameTable0
  `BlankRows 2
  LDX #$00
* LDA scoreRow, X
  STA VRAMIO
  INX
  CPX #$20
  BNE -
  `BlankRows 1
  `BlankTiles 1
  LDA #$01  ; Top-left corner
  STA VRAMIO
  LDA #$02  ; Upper border
  LDX #$00
* STA VRAMIO
  INX
  CPX #$1C  ; Do this 28 times.
  BNE -
  LDA #$03  ; Top-right corner
  STA VRAMIO
  `BlankTiles 2
  LDX #$00
* LDA #$07  ; Left border
  STA VRAMIO
  `BlankTiles 28
  LDA #$08  ; Right border
  STA VRAMIO
  `BlankTiles 2
  INX
  CPX #$16
  BNE -
  LDA #$04  ; Bottom-right corner
  STA VRAMIO
  LDX #$00
  LDA #$05  ; Bottom border
* STA VRAMIO
  INX
  CPX #$1C  ; Again, repeat 28 times.
  BNE -
  LDA #$06
  STA VRAMIO
  ; Next, write the attribute table.
  `setPPU AttributeTable0
  LDX #$00
  LDA #$00
* STA VRAMIO
  INX
  CPX #$40  ; Attribute table is 64 bytes.
  BNE -
  RTS

RenderHonkeyKongScreen:
  ; This subroutine could use A LOT of optimization.
  ; I'm a lazy bastard though, so here it is for now.
  `setPPU NameTable0
  `BlankRows 4
  LDY #$00
  LDA #$14
  STA TempCounter
  LDX #$00
* `BlankTiles 6
* LDA HonkeyKongLogoData, X
  STA VRAMIO
  INX 
  CPX TempCounter
  BNE -
  LDA TempCounter
  CLC
  ADC #$14
  STA TempCounter
  `BlankTiles 6
  INY
  CPY #$05
  BNE --
  ; Rendered "HONKEY", now start on "KONG".
  LDX #$64      ; Where the logo data offset should start
  LDY #$AA      ; Where the counter should end up
  LDA #$72      ; Initial compare value for first row.
  STA TempCounter
* `BlankTiles 9
* LDA HonkeyKongLogoData, X
  STA VRAMIO
  INX
  CPX TempCounter
  BNE -
  `BlankTiles 9
  CPY TempCounter
  BEQ +
  LDA TempCounter
  CLC
  ADC #$0E
  STA TempCounter
  BNE --
  ; Rendered "KONG", next render my super-awesome avatar sprite
* `BlankRows 2
  LDX #$00
  LDA #$04
  LDY #$18
  STA TempCounter
* `BlankTiles $0E
* LDA HonkeySprite, X
  STA $2007
  INX
  CPX TempCounter
  BNE -
  `BlankTiles 14
  CPY TempCounter
  BEQ +
  LDA TempCounter
  CLC
  ADC #$04
  STA TempCounter
  BNE --
  ; I look fantastic. Let's do more shameless self-promotion.
* `BlankRows 2
  LDX #$00
  LDA #$14
  LDY #$28
  STA TempCounter
* `BlankTiles 6
* LDA HonkeyKongURLData, X
  STA $2007
  INX
  CPX TempCounter
  BNE -
  `BlankTiles 6
  CPY TempCounter
  BEQ +
  LDA TempCounter
  CLC
  ADC #$14
  STA TempCounter
  BNE --
* `BlankRows 2
  RTS

WriteHKAttributes:
  `setPPU AttributeTable0
  LDA #$00
  LDX #$00
* STA VRAMIO
  INX 
  CPX #$20
  BNE -
  LDA #$55
  LDX #$00
* STA VRAMIO
  INX
  CPX #$10
  BNE -
  LDA #$00
  LDX #$00
* STA VRAMIO
  INX
  CPX #$10
  BNE -
  RTS

ClearAttribute:
  `setPPU AttributeTable0
  LDA #$00
* STA VRAMIO
  INX
  CPX #$40
  BNE -
  RTS

; Graphics Data
HonkeyKongLogoData:
; HONKEY
 .byte $6E, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F, $50, $51, $52, $53
 .byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $1A, $1B, $1C, $1D, $1E, $1F, $60, $61, $62, $63
 .byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $70, $71, $72, $73
 .byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3A, $3B, $3C, $3D, $3E, $3F, $80, $81, $82, $83
 .byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $4A, $4B, $4C, $4D, $4E, $4F, $90, $91, $92, $93
; KONG
 .byte $54, $55, $56, $03, $04, $05, $06, $57, $58, $59, $5A, $5B, $5C, $5D
 .byte $64, $65, $66, $13, $14, $15, $16, $67, $68, $69, $6A, $6B, $6C, $6D
 .byte $74, $75, $76, $23, $24, $25, $26, $77, $78, $79, $7A, $7B, $7C, $7D
 .byte $84, $85, $86, $33, $34, $35, $36, $87, $88, $89, $8A, $8B, $8C, $8D
 .byte $94, $95, $96, $43, $44, $45, $46, $97, $98, $99, $9A, $9B, $9C, $9D

HonkeySprite:
 .byte $A9, $AA, $AB, $AC 
 .byte $B9, $BA, $BB, $BC 
 .byte $C9, $CA, $CB, $CC 
 .byte $D9, $DA, $DB, $DC 
 .byte $E9, $EA, $EB, $EC 
 .byte $F9, $FA, $FB, $FC 

HonkeyKongURLData:
 ; http://www.honkeykong.org/
 .byte $A0, $A1, $A2, $A3, $A4, $A5, $A6, $A7, $C0, $C1, $C2, $C3, $C4, $C5, $C6, $C7, $E0, $E1, $E2, $E3
 .byte $B0, $B1, $B2, $B3, $B4, $B5, $B6, $B7, $D0, $D1, $D2, $D3, $D4, $D5, $D6, $D7, $F0, $F1, $F2, $F3

; These palettes are repeated because we don't use sprite palettes,
; and this ensures that the 32-byte palette memory is filled.
honkeyPal:
  .incbin "../res/pal/honkeykong.pal"
  .incbin "../res/pal/honkeykong.pal"

titlePal:
  .incbin "../res/pal/title.pal"
  .incbin "../res/pal/title.pal"

gamePal:
  .incbin "../res/pal/maingame.pal"
  .incbin "../res/pal/sprites.pal"

; Raw Nametable data for the title screen.
; Built using http://fsp.fm/wrk/playpower/
TitleScreen:
  .incbin "../res/nam/title.nam"