  ; HonkeyPong main program bank, 8KB

  ; A bit about segmentation before we start:
  ; We use two segments here, .data and .text
  ; Each segment contains its own Program Counter 
  ; to keep track of where we are in the data.
  ; This means we can build up the data segment
  ; in one location, and build the text segment
  ; in another without worrying about overwriting
  ; data due to conflicting program counters.

  .data

  ; .org is simply a directive telling the assembler
  ; where in memory a particular block should be 
  ; assumed to be placed. In this particular case,
  ; we are placing variables at the start of RAM.

  .org $0000

  ; Game variables, stored on Zero Page ($0000-$00FF)
  ; Zero Page is for storing variables that need faster
  ; access. It's also used for certain operations that
  ; will only work with this memory range, like bulk
  ; data transfers on a 16-bit buffer.

  ; Unlike the .alias directive, which functions similar
  ; to the #define directive in C, the .space directive
  ; will reserve a space at the current memory location
  ; with the specified size, addressable as the label name.
  ; This is effectively the same as declaring a variable 
  ; in C, but without the type restriction. You have to
  ; remember what you're using it for yourself. The assembler
  ; and (nonexistent) runtime just see it as raw data.

  .space  ScoreP1           1   ; Player 1 Score
  .space  ScoreP2           1   ; Player 2 Score
  .space  ButtonsP1         1   ; Player 1 Button State
  .space  ButtonsP2         1   ; Player 2 Button State
  .space  BallX             1   ; Ball X Position Copy
  .space  BallY             1   ; Ball Y Position Copy
  .space  BallBottom        1   ; Bottom boundary of ball.
  .space  BallUp            1   ; Flag set when ball is moving up.
  .space  BallDown          1   ; Flag set when ball is moving down.
  .space  BallLeft          1   ; Flag set when ball is moving left.
  .space  BallRight         1   ; Flag set when ball is moving right.
  .space  BallSpeedX        1   ; Number of pixels to increment X position.
  .space  BallSpeedY        1   ; Number of pixels to increment Y position.
  .space  BallFrame         1   ; Frame counter for ball animation.
  .space  Paddle1YTop       1   ; Y position of Player 1 paddle top.
  .space  Paddle1YBot       1   ; Bottom boundary of Player 1 paddle.
  .space  Paddle2YTop       1   ; Y position of Player 2 paddle top.
  .space  Paddle2YBot       1   ; Bottom boundary of Player 2 paddle.
  .space  GameState         1   ; Current game state.
  .space  MapAddr           2   ; Address of tile map for bulk transfer.
  .space  TempX             1   ; Temporary storage for X, used in rendering.
  .space  TempCounter       1   ; Temporary tile counter for nametable rendering.
  .space  FrameCounter      1   ; Frame counter used for timing pauses in logic.
  .space  PauseTimer        1   ; Counter used for timing seconds paused.
  .space  PauseDuration     1   ; How long should the game logic be paused?
  .space  TitleShowing      1   ; Flag raised when title screen is rendered.
  .space  TitleCardShowing  1   ; Flag raised when title card is rendered.
  .space  FieldRendered     1   ; Flag raised when playfield is rendered.
  .space  ScoreP1Updated    1   ; Flag raised when P1 score is updated.
  .space  ScoreP2Updated    1   ; Flag raised when P2 score is updated.
  .space  MusicPlaying      1   ; Flag raised when music is playing.
  .space  GameOverShowing   1   ; Flag raised when game over is shown.
  .space  GamePaused        1   ; Flag raised when game logic is paused.

  ; 3-byte scratchpad for Famitone,
  ; stored at end of zero page.
  .org $00F0
  .space  FT_TEMP           3
  ; Yes, I know I don't need to reserve an entire 16-byte
  ; space for three bytes. Just keeping a safe boundary set.

  ; $0100-$001FF are the location of the stack. It's better
  ; to just let the NES handle this, unless you really need
  ; to manually manipulate it.

  ; $0200 isn't really a special place in memory, just the start
  ; of available non-zeropage memory past the stack. This is
  ; generally used to store a copy of the Object Attribute Memory
  ; (OAM), also commonly known as sprite RAM. You can locate it
  ; elsewhere, as long as you feed the right address to the 
  ; PPU I/O so it knows where to copy sprite RAM updates from.
  .org $0200
  ; The ball sprite is split into 3 variables so
  ; we can alter things like palette and rotation.
  ; Technically this could also be done by addressing
  ; Ball+2 for the attribute byte, and Ball+3 for X.
  ; However, the code comes out cleaner and does the
  ; same thing arranged this way, so I'm doing it for
  ; the sake of readability and maintainability.
  .space  Ball              2
  .space  BallAttr          1
  .space  BallXPos          1

  ; Game Sprites, 4 bytes per sprite.
  ; Paddle Tile Index, Rotation, Palette and
  ; X Position are fixed, so 1 var each is OK.
  .space  PaddleP1Top       4
  .space  PaddleP1Mid       4
  .space  PaddleP1Bot       4
  .space  PaddleP2Top       4
  .space  PaddleP2Mid       4
  .space  PaddleP2Bot       4

  ; One page of RAM reserved for Famitone sound library.
  .org $0300
  .space  FT_BASE_ADR       256

  ; It should be noted, that if you're using the TSROM or 
  ; TKROM PCB configration for MMC3, there is an extra 8KB
  ; of Work RAM available to you at $6000-$7FFF. However,
  ; there are some things you should know about this. First,
  ; this RAM is write-protected by default. Check out my 
  ; mmc3_func.oph file for a subroutine demonstrating how
  ; to unlock it for write access. Second, if you're using
  ; TKROM, this section of memory is attached to a backup
  ; battery, allowing you to use it for save data, similar
  ; to games like Zelda or Shadowgate. This means that any
  ; data stored in this area will be retained on power-off
  ; until it's overwritten, the battery dies, or something
  ; else corrupts it (like not holding Reset on power-off).

  ; Start of the text segment, this is our program code.
  .text

  ; In the original NROM version of HonkeyPong, the origin
  ; was set to $C000. In this version, we set it to $E000.
  ; The reason behind this is that we can't be sure of the
  ; state of the A12 inversion bit of the MMC3 on power-up,
  ; so we don't know if $C000 is mapped in the normal place
  ; in its second-to-last bank, or elsewhere. However, we do
  ; know that $E000-$FFFF is always mapped to the last bank,
  ; so anything that needs to be run at power-on should be
  ; in this range. Don't worry if you use more than 8KB of
  ; program code. You can always use this upper 8KB to map
  ; the rest of your code in place from auxiliary banks.
  .org $E000

  ; Just like headers in C and C++, assembly files that are
  ; included in your program are appended to the location 
  ; where the include directive is placed. Generally, it's
  ; a good idea to include headers containing declarations
  ; in sequence before they're used or called, though it
  ; isn't mandatory. It just helps keep everything clean.

  .include "ppu.oph"                    ; PPU routines
  .include "setup.oph"                  ; NES setup routines
  .include "mmc3_alias.oph"             ; MMC3 Hardware aliases
  .include "mmc3_func.oph"              ; MMC3 Hardware functions
  .include "render.oph"                 ; Rendering routines
  .include "sprites.oph"                ; Sprite tables
  .include "input.oph"                  ; Controller handler
  .include "engine.oph"                 ; Main gameplay stuff
  .include "famitone2.oph"              ; Audio library
  .include "../res/snd/HonkeyPong.oph"  ; Game Music
  .include "../res/snd/Sounds.oph"      ; Game Sounds

RESET:
  ; Make sure everything gets set up properly.
  JSR ResetNES      ; Basic boilerplate NES setup code
  JSR InitMMC3      ; Initialize the mapper.
  JSR WaitVBlank    ; VBlank #1
  JSR ClearRAM      ; Clear out RAM
  `clearStack       ; Clean up the stack.
  JSR ClearSprites  ; Move sprites off-screen.

  ; Clear out any flags that could have been raised before reset.
  LDA #$00
  STA TitleShowing
  STA TitleCardShowing
  STA FieldRendered
  STA MusicPlaying
  STA GamePaused
  STA PauseTimer
  STA PauseDuration
  STA GameOverShowing
  STA ScoreP1Updated
  STA ScoreP2Updated
  STA FrameCounter

  JSR WaitVBlank    ; VBlank #2
  
  ; It generally takes 2 VBlank cycles to ensure the PPU is
  ; warmed up and ready to start drawing stuff on the screen.
  ; Now that the necessary time is passed, we can configure
  ; the PPU and get stuff set up to render the title card.
  JSR DisableGFX    ; Disable graphics

  ; OR some bitmasks together to set the PPU how we want it.
  ; (Note that NMI is disabled here, so we don't corrupt VRAM 
  ; by doing bulk data transfers + everything else and run out
  ; of CPU time before the NES starts accessing VRAM again.)
  `ConfigurePPU BGAddr1|PPUInc1|NameTable20
  ; Set Background Pattern Table to 1 (Second half of CHR bank)
  ; Increment PPU I/O by 1 (Horizontal), Nametable at $2000

  ; Clear the nametables.
  JSR ClearNameTables

  LDA #STATETITLECARD     ; We load the initial title card state here,
  STA GameState           ; before the main loop starts.
  JSR EngineTitleCard     ; Start title card rendering.
  ; This routine will start the Non-Maskable Interrupt when it's
  ; safe to do so. After it completes, it'll jump into the main loop.

MainLoop:
  JMP MainLoop     ; Jump back, infinite loop. All game logic performed on NMI.

; Non Maskable Interrupt, ran once per frame when VBlank triggers.
NMI:

  ; The VBlank period has just started, it's safe to update PPU memory.
  LDA #$00
  STA SpriteAddr  ; set the low byte (00) of the RAM address
  LDA #$02
  STA SpriteDMA   ; set the high byte (02) of the RAM address, start the transfer

  ; PPU updates are done, run the game logic.
  ; IMPORTANT NOTE: The above period is the ONLY time you should
  ; attempt to write to the PPU memory. Writing any other time will
  ; corrupt the display, due to conflicts from the NES trying to read
  ; the video memory while you're trying to write to it. If your game
  ; graphics get trashed, it usually means you're writing to the PPU 
  ; RAM outside of the initial VBlank period, or you've run out of 
  ; processing time in the above segment. This info can save your life.
  
  JSR CheckPauseTimer

  ; Read the controller states.
  JSR ReadController1
  JSR ReadController2

  ; Check the game state, and jump to the proper subroutine.
* LDA GameState
  CMP #STATETITLECARD
  BNE +
  JSR EngineTitleCard

* LDA GameState
  CMP #STATETITLE
  BNE +
  JSR EngineTitle

* LDA GameState
  CMP #STATEPLAYING
  BNE +
  JSR EnginePlaying

* LDA GameState
  CMP #STATEGAMEOVER
  BNE +
  JSR EngineGameOver

  ; Update sound engine
* JSR FamiToneUpdate

  ; Update Sprite RAM
  ; As a footnote to the lecture above about only updating graphics
  ; at the top of the NMI during VBlank, I feel I should point out
  ; that updating sprites here is OK, since the memory range used
  ; in this routine ($0200) isn't actual video memory, but a page in
  ; RAM used as a *copy* of the Object Attribute Memory. It will be
  ; updated via DMA during the next VBlank, before the frame is drawn.

  JSR UpdateSprites

  RTI   ; ReTurn from Interrupt

  ; Set up the 3 main vectors the NES looks for 
  ; at the end of the ROM on power-up.

  ; Unlike the .org directive, .advance will advance the program 
  ; counter and zero fill the space leading up to it to pad the 
  ; binary up to the designated location. This is necessary in places
  ; like this, where the hardware expects a lookup table with the 
  ; necessary functions to set up the NES and get things running.

  .advance $FFFA    ; First of the three vectors starts here

  .word NMI         ; Non-Maskable Interrupt, runs during VBlank, once per frame.

  .word RESET       ; This function is performed on power-on and reset.

  .word 0           ; external IRQ is not used here
